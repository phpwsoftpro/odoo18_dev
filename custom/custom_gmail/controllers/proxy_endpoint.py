# -*- coding: utf-8 -*-
from odoo import http
from odoo.http import request
import requests
import logging
from markupsafe import Markup
import json
import re

_logger = logging.getLogger(__name__)

# ===== Danh s√°ch stage chu·∫©n theo pipeline c·ªßa b·∫°n =====
KNOWN_STAGES = [
    "Recruitment",
    "Reply Client",
    "Estimate Project",
    "Proposition/ Trung Check",
    "Checking Meeting",
    "Send Email to Client",
    "Email Done",
    "Enrich/Follow-up/ Other",
    "Done Follow-up Email",
    "Reject",
]

def _normalize_stage_name(s):
    """Chu·∫©n h√≥a t√™n stage GPT tr·∫£ v·ªÅ v·ªÅ ƒë√∫ng t√™n trong KNOWN_STAGES."""
    if not s:
        return None
    s = re.sub(r"\s+", " ", str(s)).strip()
    s_low = s.lower()

    # Map c√°c synonym/keyword ph·ªï bi·∫øn
    mapping = {
        "recruitment": "Recruitment",
        "reply client": "Reply Client",
        "estimate project": "Estimate Project",
        "proposition": "Proposition/ Trung Check",
        "proposition/ trung check": "Proposition/ Trung Check",
        "checking meeting": "Checking Meeting",
        "send email to client": "Send Email to Client",
        "email done": "Email Done",
        "enrich": "Enrich/Follow-up/ Other",
        "follow-up": "Enrich/Follow-up/ Other",
        "enrich/follow-up/ other": "Enrich/Follow-up/ Other",
        "done follow-up email": "Done Follow-up Email",
        "reject": "Reject",
        # VN keywords
        "tuy·ªÉn": "Recruitment",
        "tuyen": "Recruitment",
        "b√°o gi√°": "Proposition/ Trung Check",
        "bao gia": "Proposition/ Trung Check",
        "ƒë·ªÅ xu·∫•t": "Proposition/ Trung Check",
        "de xuat": "Proposition/ Trung Check",
        "h·ªçp": "Checking Meeting",
        "hop": "Checking Meeting",
        "g·ª≠i email": "Send Email to Client",
        "gui email": "Send Email to Client",
        "t·ª´ ch·ªëi": "Reject",
        "tu choi": "Reject",
    }

    for k, v in mapping.items():
        if k in s_low:
            return v

    for name in KNOWN_STAGES:
        if s_low == name.lower():
            return name

    return None

def _find_stage_id(env, stage_name, team_id=None):
    """T√¨m stage theo t√™n v√† team (team r·ªóng ho·∫∑c ƒë√∫ng team)."""
    if not stage_name:
        return False
    domain = [('name', '=', stage_name)]
    domain = domain + ['|', ('team_id', '=', False), ('team_id', '=', team_id or False)]
    stage = env['crm.stage'].sudo().search(domain, limit=1)
    return stage.id or False

def _extract_json(s):
    """B√≥c JSON k·ªÉ c·∫£ khi GPT b·ªçc ```json ... ```."""
    if not s:
        return None
    s = str(s).strip()
    if s.startswith("```"):
        # b·ªè ```json ... ```
        s = s.strip('`').strip()
        if s.lower().startswith("json"):
            s = s[4:].strip()
    try:
        return json.loads(s)
    except Exception:
        return None


class EmailAnalyzeController(http.Controller):

    @http.route('/analyze_email_proxy', type='json', auth='public', methods=['POST'], csrf=False)
    def analyze_email_proxy(self):
        # Simple API key
        if request.httprequest.headers.get('X-API-KEY') != 'my-secret-key':
            return {'error': 'Invalid API key'}

        try:
            data = request.params

            email_text = (data.get('text') or '').strip()
            subject = data.get('subject') or 'No Subject'
            sender_name = data.get('sender_name') or 'Ng∆∞·ªùi g·ª≠i kh√¥ng x√°c ƒë·ªãnh'
            email_from = (data.get('email_from') or 'unknown@example.com').strip()
            html_body = data.get('html_body') or email_text
            message_id = (data.get('message_id') or '').strip()

            if not email_text:
                return {'error': 'No email body provided'}

            if not email_from or email_from.lower() == "unknown@example.com":
                _logger.warning("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c email ng∆∞·ªùi g·ª≠i ‚Äî B·ªè qua.")
                return {'error': "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë·ªãa ch·ªâ email ng∆∞·ªùi g·ª≠i ‚Äî kh√¥ng th·ªÉ t·∫°o partner."}

            # ===== Step 1: L·∫•y token Flask =====
            login_payload = {"email": "lebadung@wsoftpro.com", "password": "zLrA3pN7"}
            _logger.info("üîê ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token...")
            login_resp = requests.post("http://192.168.1.51:9999/login", json=login_payload, timeout=20)
            if login_resp.status_code != 200:
                _logger.error("‚ùå ƒêƒÉng nh·∫≠p Flask th·∫•t b·∫°i")
                return {'error': 'Login to analysis service failed'}

            token = login_resp.json().get("token")
            if not token:
                _logger.error("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ Flask")
                return {'error': 'No token returned from login'}

            # ===== Step 2: Prompt y√™u c·∫ßu tr·∫£ JSON c√≥ stage + summary =====
            stage_list_str = "\n".join(f"- {s}" for s in KNOWN_STAGES)
            prompt = f"""
            Analyze the email and classify it into exactly one CRM stage from this list:
            {stage_list_str}
            
            Return a pure JSON object with fields ONLY:
            - "stage": one of the stage names above (exact text)
            - "confidence": float 0..1
            - "reason": short reason (max 200 chars)
            - "summary": a concise human-readable summary (2-4 sentences), HTML-safe (no code fences)
            
            DO NOT include any other text, only JSON.
            
            Email:
            Subject: {subject}
            From: {email_from}
            
            Content:
            {email_text}
            """.strip()

            payload = {'text': prompt, 'email': email_from, 'image_base64': None}
            headers = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}

            _logger.info("üì° G·ª≠i y√™u c·∫ßu ph√¢n t√≠ch AI (stage+summary JSON)...")
            response = requests.post("http://192.168.1.51:9999/api/status", json=payload, headers=headers, timeout=None)
            if response.status_code != 200:
                _logger.error(f"‚ùå Flask API tr·∫£ v·ªÅ l·ªói {response.status_code}: {response.text}")
                return {'error': f'API request failed with status {response.status_code}'}

            raw_ai = response.json().get("result", "") or ""
            parsed = _extract_json(raw_ai)

            ai_stage_name = None
            ai_confidence = 0.0
            ai_reason = ""
            ai_summary = ""

            if parsed:
                ai_stage_name = _normalize_stage_name(parsed.get("stage"))
                try:
                    ai_confidence = float(parsed.get("confidence") or 0)
                except Exception:
                    ai_confidence = 0.0
                ai_reason = parsed.get("reason") or ""
                ai_summary = parsed.get("summary") or ""
            else:
                _logger.warning("‚ö†Ô∏è GPT kh√¥ng tr·∫£ JSON h·ª£p l·ªá, fallback heuristic.")
                ai_stage_name = _normalize_stage_name(raw_ai)

            # Fallback x√°c ƒë·ªãnh stage n·∫øu v·∫´n None
            if not ai_stage_name:
                text_low = (email_text or "").lower()
                if any(k in text_low for k in ["hire", "recruit", "cv", "resume", "tuy·ªÉn", "tuyen"]):
                    ai_stage_name = "Recruitment"
                elif any(k in text_low for k in ["quote", "quotation", "pricing", "b√°o gi√°", "bao gia", "ƒë·ªÅ xu·∫•t", "de xuat"]):
                    ai_stage_name = "Proposition/ Trung Check"
                elif any(k in text_low for k in ["reject", "not interested", "another vendor", "t·ª´ ch·ªëi", "tu choi"]):
                    ai_stage_name = "Reject"
                else:
                    ai_stage_name = "Enrich/Follow-up/ Other"

            _logger.info(f"üß≠ Stage GPT ƒë·ªÅ xu·∫•t: {ai_stage_name} (conf={ai_confidence:.2f})")

            # ===== Build HTML ph√¢n t√≠ch ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp =====
            analysis_html = f"""
                <div>
                    <b>üîé AI Summary:</b><br/>{(ai_summary or '‚Äî').replace('\n', '<br/>')}<br/><br/>
                    <b>Reason:</b> {(ai_reason or '‚Äî')}<br/>
                    <b>Stage:</b> {ai_stage_name or '‚Äî'} (conf: {ai_confidence:.2f})
                </div>
            """
            comment_html = Markup(f"""
                <div>
                    <b>‚úâÔ∏è N·ªôi dung Email:</b><br/>{html_body}
                    <hr/>
                    <b>üß† GPT Ph√¢n T√≠ch:</b><br/>{analysis_html}
                </div>
            """)

            # ===== Step 3: T√¨m/ t·∫°o partner =====
            partner = request.env['res.partner'].sudo().search([('email', '=', email_from)], limit=1)
            if not partner:
                partner = request.env['res.partner'].sudo().search([('name', '=', sender_name)], limit=1)
            if not partner:
                _logger.info(f"üë§ T·∫°o partner m·ªõi: {sender_name} - {email_from}")
                partner = request.env['res.partner'].sudo().create({
                    'name': sender_name or "No Name",
                    'email': email_from,
                })

            # ===== Stage ID theo team (n·∫øu c√≥) =====
            team_id = request.env.context.get('default_team_id')  # t√πy ch·ªânh n·∫øu c·∫ßn
            stage_id = _find_stage_id(request.env, ai_stage_name, team_id=team_id)
            if not stage_id:
                _logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y crm.stage t√™n '{ai_stage_name}'. D√πng stage m·∫∑c ƒë·ªãnh.")

            # ===== Step 4: Lu√¥n t·∫°o lead m·ªõi v·ªõi stage + ph√¢n t√≠ch =====
            lead_vals = {
                'name': subject,
                'email_from': email_from,
                'partner_id': partner.id,
                'reply_email': html_body,        # fields.Html (custom)
                'message_id': message_id,        # custom
                'body_analyze': analysis_html,   # fields.Html (custom)
            }
            if stage_id:
                lead_vals['stage_id'] = stage_id

            _logger.debug(f"üÜï Lead values: {lead_vals}")
            _logger.info(f"üõ†Ô∏è T·∫°o lead m·ªõi ·ªü stage '{ai_stage_name}' (ID={stage_id}) cho partner {partner.name} ({partner.email})")

            lead = request.env['crm.lead'].sudo().create(lead_vals)

            # Chatter note
            lead.message_post(
                body=comment_html,
                message_type="comment",
                subtype_xmlid="mail.mt_note"
            )

            _logger.info(f"üèÅ Xong. Lead ID: {lead.id} ‚Äî Stage: {ai_stage_name}")
            return {
                'success': True,
                'result': parsed or raw_ai,  # tr·∫£ v·ªÅ JSON parsed n·∫øu c√≥
                'lead_id': lead.id,
                'stage': ai_stage_name,
                'confidence': ai_confidence,
                'message': f"‚úÖ Created lead in stage '{ai_stage_name}'"
            }

        except requests.exceptions.RequestException as e:
            _logger.error(f"‚ùå K·∫øt n·ªëi ƒë·∫øn Flask th·∫•t b·∫°i: {str(e)}")
            return {'error': f'Failed to connect to analysis service: {str(e)}'}

        except Exception as e:
            _logger.exception("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω email:")
            return {'error': f'Unexpected error: {str(e)}'}
