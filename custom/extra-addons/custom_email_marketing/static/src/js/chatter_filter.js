/** @odoo-module **/

// Bi·∫øn ƒë·ªÉ theo d√µi URL tr∆∞·ªõc ƒë√≥, gi√∫p ph√°t hi·ªán chuy·ªÉn trang/task
let previousUrl = window.location.href;
// Flag ƒë√°nh d·∫•u ƒë√£ thi·∫øt l·∫≠p filter
let isFilterSetup = false;

function applyFilter() {
    const filterSelect = document.getElementById("chatter_filter_select");
    if (!filterSelect) return;

    const filterType = filterSelect.value;
    const chatter = document.querySelector(".o-mail-Chatter-content");
    if (!chatter) return;

    const messages = chatter.querySelectorAll('.o-mail-Message[aria-label="Message"]');
    const notes = chatter.querySelectorAll('.o-mail-Message[aria-label="Note"]');
    const noteEmails = chatter.querySelectorAll('.o-mail-Message[aria-label="Note Email"]'); // üëà m·ªõi
    const systemNotifications = chatter.querySelectorAll('.o-mail-Message[aria-label="System notification"]');
    const activities = chatter.querySelectorAll(".o-mail-ActivityList");

    // ·∫®n t·∫•t c·∫£
    chatter.querySelectorAll(".o-mail-Message, .o-mail-ActivityList").forEach(el => {
        el.style.display = "none";
    });

    switch (filterType) {
        case "all":
            messages.forEach(el => el.style.display = "");
            notes.forEach(el => el.style.display = "");
            noteEmails.forEach(el => el.style.display = ""); // üëà hi·ªÉn th·ªã Note Email
            activities.forEach(el => el.style.display = "");
            systemNotifications.forEach(el => el.style.display = "");
            break;
        case "message":
            messages.forEach(el => el.style.display = "");
            break;
        case "note":
            notes.forEach(el => el.style.display = "");
            break;
        case "note_email":
            noteEmails.forEach(el => el.style.display = "");
            break;
        case "activity":
            activities.forEach(el => el.style.display = "");
            systemNotifications.forEach(el => el.style.display = "");
            break;
    }
}


// H√†m ki·ªÉm tra xem URL ƒë√£ thay ƒë·ªïi ch∆∞a (chuy·ªÉn task)
function hasUrlChanged() {
    const currentUrl = window.location.href;
    if (currentUrl !== previousUrl) {
        previousUrl = currentUrl;
        return true;
    }
    return false;
}

function ensureNoteEmailOptionExists() {
    const filterSelect = document.getElementById("chatter_filter_select");
    if (!filterSelect) return;

    // Ki·ªÉm tra xem ƒë√£ c√≥ option Note Email ch∆∞a
    const exists = Array.from(filterSelect.options).some(opt => opt.value === "note_email");
    if (!exists) {
        const option = document.createElement("option");
        option.value = "note_email";
        option.textContent = "Note Email";
        filterSelect.appendChild(option);
    }
}

function setupChatterFilter() {
    const filterSelect = document.getElementById("chatter_filter_select");
    const chatter = document.querySelector(".o-mail-Chatter-content");
    if (!filterSelect || !chatter) return;

    ensureNoteEmailOptionExists(); // üëà g·ªçi ·ªü ƒë√¢y

    const isNewTask = hasUrlChanged();
    if (isNewTask || !isFilterSetup) {
        filterSelect.value = "note"; // m·∫∑c ƒë·ªãnh
        isFilterSetup = true;
    }

    applyFilter();

    filterSelect.removeEventListener("change", applyFilter);
    filterSelect.addEventListener("change", applyFilter);
}


// Theo d√µi DOM ƒë·ªÉ ph√°t hi·ªán khi chatter load
document.addEventListener("DOMContentLoaded", () => {
    // Thi·∫øt l·∫≠p ban ƒë·∫ßu
    setupChatterFilter();
    
    // S·ª≠ d·ª•ng MutationObserver ch·ªâ ƒë·ªÉ ph√°t hi·ªán khi chatter m·ªõi xu·∫•t hi·ªán
    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            // Ch·ªâ x·ª≠ l√Ω khi c√≥ ph·∫ßn t·ª≠ m·ªõi ƒë∆∞·ª£c th√™m v√†o
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                // Ki·ªÉm tra xem chatter m·ªõi c√≥ xu·∫•t hi·ªán kh√¥ng
                const chatterExists = document.querySelector(".o-mail-Chatter-content");
                const filterExists = document.getElementById("chatter_filter_select");
                
                if (chatterExists && filterExists) {
                    // Khi chuy·ªÉn task ho·∫∑c l·∫ßn ƒë·∫ßu load, ki·ªÉm tra URL
                    if (hasUrlChanged()) {
                        isFilterSetup = false; // Reset flag ƒë·ªÉ thi·∫øt l·∫≠p l·∫°i filter
                    }
                    setupChatterFilter();
                    
                    // Kh√¥ng c·∫ßn d·ª´ng observer v√¨ ch√∫ng ta c·∫ßn ti·∫øp t·ª•c gi√°m s√°t
                    // khi chuy·ªÉn gi·ªØa c√°c task kh√°c nhau
                }
            }
        }
    });

    // Theo d√µi thay ƒë·ªïi URL c·ªßa Odoo (th∆∞·ªùng l√† khi chuy·ªÉn task)
    window.addEventListener('hashchange', function() {
        isFilterSetup = false; // ƒê√°nh d·∫•u c·∫ßn thi·∫øt l·∫≠p l·∫°i khi URL thay ƒë·ªïi
    });

    // Theo d√µi to√†n b·ªô DOM ƒë·ªÉ ph√°t hi·ªán khi chatter xu·∫•t hi·ªán
    observer.observe(document.body, { childList: true, subtree: true });
});

